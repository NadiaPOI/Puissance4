const addPawn = require("./addPawn");

describe("addPawn", function(){
    it("should add a pawn to column 6 when gameboard is empty", function(){
        var gameboard = [
            ["","","","","","",""],
            ["","","","","","",""],
            ["","","","","","",""],
            ["","","","","","",""],
            ["","","","","","",""],
            ["","","","","","",""]
        ];

        expect(addPawn(gameboard, 6))
        .toEqual([
            ["","","","","","",""],
            ["","","","","","",""],
            ["","","","","","",""],
            ["","","","","","",""],
            ["","","","","","",""],
            ["","","","","","","Y"]
        ]);
    })
    it("should add a pawn to row 0 column 0 when gameboard is empty", function(){
        var gameboard = [
            ["","","","","","",""],
            ["","","","","","",""],
            ["","","","","","",""],
            ["","","","","","",""],
            ["","","","","","",""],
            ["","","","","","",""]
        ];

        expect(addPawn(gameboard, 0))
        .toEqual([
            ["","","","","","",""],
            ["","","","","","",""],
            ["","","","","","",""],
            ["","","","","","",""],
            ["","","","","","",""],
            ["Y","","","","","",""]
        ]);
    })
    it("should add a pawn to row 4 column 0 when column 0 is full", function(){
        var gameboard = [
            ["","","","","","",""],
            ["","","","","","",""],
            ["","","","","","",""],
            ["","","","","","",""],
            ["","","","","","",""],
            ["Y","","","","","",""]
        ];

        expect(addPawn(gameboard, 0))
        .toEqual([
            ["","","","","","",""],
            ["","","","","","",""],
            ["","","","","","",""],
            ["","","","","","",""],
            ["Y","","","","","",""],
            ["Y","","","","","",""]
        ]);
    })

    it("should add a pawn to row 3 column 0 when column 0 is full", function(){
        var gameboard = [
            ["","","","","","",""],
            ["","","","","","",""],
            ["","","","","","",""],
            ["","","","","","",""],
            ["Y","","","","","",""],
            ["Y","","","","","",""]
        ];

        expect(addPawn(gameboard, 0))
        .toEqual([
            ["","","","","","",""],
            ["","","","","","",""],
            ["","","","","","",""],
            ["Y","","","","","",""],
            ["Y","","","","","",""],
            ["Y","","","","","",""]
        ]);
    })

    it("should fill the column", function(){
        var gameboard = [
            ["","","","","","",""],
            ["Y","","","","","",""],
            ["Y","","","","","",""],
            ["Y","","","","","",""],
            ["Y","","","","","",""],
            ["Y","","","","","",""]
        ];

        expect(addPawn(gameboard, 0))
        .toEqual([
            ["Y","","","","","",""],
            ["Y","","","","","",""],
            ["Y","","","","","",""],
            ["Y","","","","","",""],
            ["Y","","","","","",""],
            ["Y","","","","","",""]
        ]);
    })

    it("should throw the column is full", function(){
        var gameboard = [
            ["Y","","","","","",""],
            ["Y","","","","","",""],
            ["Y","","","","","",""],
            ["Y","","","","","",""],
            ["Y","","","","","",""],
            ["Y","","","","","",""]
        ];
        expect(function() {addPawn(gameboard, 0)}).toThrow("The column is full");
    })
    
    it("should return a error message when the gameboard is full", function(){
        var gameboard = [
            ["Y", "Y", "Y", "Y", "Y", "Y", "Y"],
            ["Y", "Y", "Y", "Y", "Y", "Y", "Y"],
            ["Y", "Y", "Y", "Y", "Y", "Y", "Y"],
            ["Y", "Y", "Y", "Y", "Y", "Y", "Y"],
            ["Y", "Y", "Y", "Y", "Y", "Y", "Y"],
            ["Y", "Y", "Y", "Y", "Y", "Y", "Y"]
        ];
        expect(function() {addPawn(gameboard, 2)}).toThrow("The gameboard is full");
    })
})